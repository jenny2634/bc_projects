//1.compie 버전 세팅
//2. 컨트렉트 단위로 작성 => class 단위로 작성
//솔리디티 관점에서 컨트렉트는 무수한 코드들, 데이터가 작성되거나 보관된 형태
//이더리움 블록체인상에 특정 주소(hash)로 존재하는 것 
//솔리디티: 스마트 컨트렉트를 개발하는 언어
//변수
//함수


//기본타입
//1. 복합 데이터 타입(complex type) : 문자열, 구조체, 배열 <- 여러개의 데이터를 가지고 있다
//2. 기본 타입(basic type) : bool, int, float,... <- 단일 데이터를 가지고 있다

//주의사항:타입만 볼거니까 함수 형태는 신경을 안쓴다

//수치형
//int -> 정수 타입, int8~ int256, int ==int256
//uint -> 부호없는 정수타입(양수)
//부동소수점 : 
//fixed / ufixed : 고정크기 소수점 , 부호없는 고정크기 소수점 타입
//fixedMxN 형식:fixed128x19 => 128:비트수, 19:소수점자리수
//N:0~80가능, M:8~256사이 단,8의 배수만 가능
//bool:truef/false
//단일형 types: int, uint,bool,bytes,fixed,ufixed
//복합형 types:string,address,enum,tuple,struct

//열거형: enum
//주소형: address
//20byte 크기의 자료형
//컨트렉트의 주소,계좌의 주소등을 담는 변수 타입
//this : 현재 컨트렉트, 
//임의의(더미) 계좌 생성

//튜플
/*
- tuple, 값을 묶는다
- 여러 데이터를 묶을 때 사용
- 자료형이 달라도 ok
- 여러 데이터를 한 덩어리로 처리할때 유용 -> return
- (값, 값)
*/

//변수의 저장위치
//1.storage(스토리지) : 상태변수(멤버변수), 함수내의 로컬변수
//2.memory(메모리)   : 함수의 매개변수, 함수의 리턴값 -> 대부분 명시적 표현
//상태변수(멤버변수) -> storage(스토리지)
//지역변수 : 함수 내부에 위치한 변수

//생성자
//생성자의 인자값이 존재할 경우, 배포시 입력한다(테스트관점)
//컨트렉의 이름을 사용하지 않고(구버전은 사용했음)
//constructor 키워드에 함수 형태로 구현한다

//함수
/* 
 - 구조
function 함수명 ( 타입 x1, 타입x2, ...) options returns( 타입 x1, 타입x2, ...)
{
  //statement;,,,
  return(...) //<-생략가능
}
- options
1)가시성	  : (access modifier)  
  - external : 컨트렉트상 명시된 것만 외부에 공개
  - public : 모든 컨트렉트의 내부 외부에 공개
  - internal : 해당 컨트렉트와 상속 컨트렉트에만 공개
  - private :  오직, 해당 컨트렉트만 공개
2)비용측면 : 
  - constant(x) (더이상 사용되지 않는다 정의) -> 이렇게 정의된 함수는 gas를 소모하지 않는다
  - view : 다음 행위를 함수 내부에서 하지 않겠다 <- 아래코드를 해야하면 view 사용 불가
	1) 상태 변수 값 변경
	2) 이벤트 발생(이벤트 -> 컨트렉트 -> nodejs쪽으로 이벤트 전달)
	3) 다른 컨트렉트 생성
	4) 이더 전송(송금)
	5) view나 pure로 선언되지 않은 함수 호출
  - pure : 다음 행위를 함수 내부에서 하지 않겠다 <- 아래코드를 해야하면 pure 사용 불가
               1) 상태 변수를 읽는다
               2) xx.balance 잔액확인등 접근시도
               3) 컨트렉트의 사전에 이미 정의된 전역객체들 block, tx, msg등을 접근행위
               4) pure로 정의되어 있지 않는 함수를 호출
  - payable : 비용이 발생된다. 돈이 움직이다
	ex) 컨트렉트가 멤버함수를 통해서 다른 지갑(타인), 이더를 송금하거나 받는 등 
	-> 함수 자체가 지불가능한 형태가 되는 경우 사용
*/

gas가 발생되지 않는 상황에서 상태변수를 읽는다 => view ok
//상태 변수를 수정함으로 view사용 불가
//뭔가 많은 일을 했다..
//상태변수를 사용 안햇다. 지불 관련 내용 없다
//t4함수를 구현하는데 부호없는정수 2개를 입력받아서 더한값을 리턴하는 함수를 구현하시오

//리턴할 변수를 returns에서 미리 지정하면 변수 선언 및 return도 생략 가능
//pure 함수 내부에서는 pure함수만 호출할 수 있다
//t(), t2() <- error

//리턴값이 없으면  returns 생략
//외부에서만 사용 가능
//구현 절차
/*
- 1. 기능을 우선 구현 ( ~public returns(생략가능))
- 2. 함수의 비용적인 측면 고려하여, view, pure, payable 사용
- 3. 가시성에 대한 검토 후 최적의 가시성 구성
*/

//생성자
//상태변수
//생성자에서 상태변수를 초기화

//컨트렉트 생성






























